# Python Automation Environment Configuration
# Copy this file to .env and update with your settings

# ============================================================================
# CORE SETTINGS
# ============================================================================

# Environment (development, staging, production)
ENVIRONMENT=development

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Log file path (leave empty for console only)
LOG_FILE=./logs/automation.log

# ============================================================================
# EMAIL CONFIGURATION
# ============================================================================

# SMTP server settings (Gmail example)
# For Gmail, use App Passwords: https://support.google.com/accounts/answer/185833
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-app-password

# Alternative SMTP providers:
# Outlook: smtp-mail.outlook.com:587
# Yahoo: smtp.mail.yahoo.com:587
# Custom SMTP: your-smtp-server.com:587

# ============================================================================
# DATABASE CONFIGURATION (Optional)
# ============================================================================

# PostgreSQL settings
DB_HOST=localhost
DB_PORT=5432
DB_NAME=automation
DB_USER=postgres
DB_PASSWORD=password

# Redis settings (for caching and queuing)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=redis_password
REDIS_DB=0

# ============================================================================
# SECURITY SETTINGS
# ============================================================================

# API keys and secrets (generate random values for production)
API_KEY=your-api-key-here
SECRET_KEY=your-secret-key-here
JWT_SECRET=your-jwt-secret-here

# Allowed hosts (comma-separated)
ALLOWED_HOSTS=localhost,127.0.0.1,python-webhook

# ============================================================================
# N8N INTEGRATION
# ============================================================================

# n8n server settings
N8N_BASE_URL=http://localhost:5678
N8N_API_KEY=your-n8n-api-key
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=password

# ============================================================================
# WEBHOOK SERVER SETTINGS
# ============================================================================

# Webhook server configuration
WEBHOOK_HOST=0.0.0.0
WEBHOOK_PORT=5000
WEBHOOK_DEBUG=false

# Request timeout settings
REQUEST_TIMEOUT=30
MAX_RETRIES=3
RETRY_DELAY=1

# ============================================================================
# FILE MANAGEMENT SETTINGS
# ============================================================================

# Default directories
TEMP_DIRECTORY=./temp
BACKUP_DIRECTORY=./backups
DATA_DIRECTORY=./data

# File organization settings
BACKUP_BEFORE_ORGANIZE=true
CREATE_DATE_FOLDERS=false
HANDLE_DUPLICATES=rename

# ============================================================================
# WEB SCRAPING SETTINGS
# ============================================================================

# User agent for web requests
USER_AGENT="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"

# Scraping behavior
RESPECT_ROBOTS_TXT=true
DELAY_BETWEEN_REQUESTS=1
MAX_CONCURRENT_REQUESTS=5

# Browser automation (Selenium)
CHROME_HEADLESS=true
CHROME_TIMEOUT=30
CHROMEDRIVER_PATH=/usr/local/bin/chromedriver

# ============================================================================
# MONITORING AND ALERTING
# ============================================================================

# Health check settings
HEALTH_CHECK_INTERVAL=60
METRICS_COLLECTION=true

# Alert thresholds
CPU_ALERT_THRESHOLD=80
MEMORY_ALERT_THRESHOLD=85
DISK_ALERT_THRESHOLD=90

# Notification settings
ALERT_EMAIL=admin@your-domain.com
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# ============================================================================
# EXTERNAL SERVICES (Optional)
# ============================================================================

# Slack integration
SLACK_BOT_TOKEN=xoxb-your-slack-bot-token
SLACK_CHANNEL=#automation

# Discord integration
DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/YOUR/WEBHOOK

# Telegram integration
TELEGRAM_BOT_TOKEN=your-telegram-bot-token
TELEGRAM_CHAT_ID=your-chat-id

# ============================================================================
# DEVELOPMENT SETTINGS
# ============================================================================

# Development mode settings (only used when ENVIRONMENT=development)
DEV_RELOAD=true
DEV_DEBUG=true
DEV_PROFILING=false

# Testing settings
TEST_DATABASE_URL=sqlite:///test.db
TEST_SKIP_SLOW=false

# ============================================================================
# DOCKER SETTINGS
# ============================================================================

# Docker-specific environment variables
DOCKER_NETWORK=automation_network
DOCKER_RESTART_POLICY=unless-stopped

# Container resource limits
MEMORY_LIMIT=512m
CPU_LIMIT=1.0

# ============================================================================
# BACKUP AND RECOVERY
# ============================================================================

# Backup settings
BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
BACKUP_RETENTION_DAYS=30
BACKUP_LOCATION=./backups

# S3 backup (optional)
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
S3_BUCKET_NAME=your-backup-bucket
S3_REGION=us-east-1

# ============================================================================
# NOTES
# ============================================================================

# 1. Never commit this file with real credentials to version control
# 2. Use strong, unique passwords for all services
# 3. Regularly rotate API keys and secrets
# 4. Consider using a secrets management service for production
# 5. Test your configuration with the setup script: python scripts/setup.py
